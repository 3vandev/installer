/*
 * MIT License
 *
 * Copyright (c) 2022 TheKodeToad, artDev & other contributors
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.github.solclient.installer.ui.step;

import java.awt.EventQueue;
import io.github.solclient.installer.InstallStatusCallback;
import io.github.solclient.installer.locale.Locale;
import io.github.solclient.installer.ui.InstallerFrame;
import java.awt.Color;
import javax.swing.SwingUtilities;

public class InstallStep extends javax.swing.JPanel implements InstallStatusCallback {

	private int lastMax = 100;
	/**
	 * Creates new form InstallStep
	 */
	public InstallStep(InstallerFrame frame) {
		initComponents();
		frame.setNextButtonAction(()-> {
			System.exit(0);
		});
		frame.getInstaller().install(frame.getInstallerType(), this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        installScrollPane = new javax.swing.JScrollPane();
        installLogArea = new javax.swing.JTextArea();
        installProgressBar = new javax.swing.JProgressBar();

        setPreferredSize(new java.awt.Dimension(0, 0));

        installScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        installScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        installScrollPane.setPreferredSize(new java.awt.Dimension(0, 0));

        installLogArea.setEditable(false);
        installLogArea.setColumns(20);
        installLogArea.setRows(5);
        installScrollPane.setViewportView(installLogArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(installScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(installProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(installScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea installLogArea;
    private javax.swing.JProgressBar installProgressBar;
    private javax.swing.JScrollPane installScrollPane;
    // End of variables declaration//GEN-END:variables

	@Override
	public void setTextStatus(String status) {
		EventQueue.invokeLater(() -> installLogArea.setText(installLogArea.getText() + status + "\n"));
	}

	@Override
	public void setProgressBarValues(int max, int cur) {
		EventQueue.invokeLater(() -> {
			if (lastMax != max) {
				installProgressBar.setMaximum(max);
				lastMax = max;
			}
			installProgressBar.setValue(cur);
		});
	}

	@Override
	public void setProgressBarIndeterminate(boolean indeterminate) {
		EventQueue.invokeLater(() -> installProgressBar.setIndeterminate(indeterminate));
	}

	@Override
	public void onDone(boolean okay) {
		EventQueue.invokeLater(() -> {
            if(okay) {
                setTextStatus(Locale.getString(Locale.MSG_DONE));
            }
			installProgressBar.setIndeterminate(false);
			installProgressBar.setValue(0);
			InstallerFrame.INSTANCE.showNextButton(true);
		});
	}
}
